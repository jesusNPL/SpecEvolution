spectrum <- spectra[, 2:(nBands + 1)]
bandNames <- names(spectrum)[1:nBands]
obs_tbl <- list()
p_vals <- list()
for(i in 1:nBands) {
svMisc::progress(i, max.value = nBands)
band <- setNames(spectrum[, i], taxa)
unity <- make_unit_tree(phy = tree, data = band)
## calculate default test stats on observed data
obs <- calculate_pic_stat(unity, stats = NULL)
obs$Band <- bandNames[i]
obs_tbl[[i]] <- obs
## simulate data on unit.tree
sim.dat <- simulate_char_unit(unity, nsim = nSim)
## calculate default test stats on simulated data
sims <- calculate_pic_stat(sim.dat, stats = NULL)
## compare simulated to observed test statistics
res <- compare_pic_stat(obs, sims)
p_vals[[i]] <- res$p.values
}
obs_tbl <- do.call(rbind, obs_tbl)
p_vals <- data.frame(do.call(rbind, xx))
p_vals$Band <- bandNames
results <- list(adequacy = obs_tbl, pVals = p_vals)
return(results)
}
ttt <- check_Adequacy(tree = oak_tree,
spectra = oak_spectra$Spec_mean,
nBands = 10,
nSim = 1000)
bandNames <- names(spectrum)[1:nBands]
check_Adequacy <- function(tree, spectra, nBands = 10, nSim = 1000) {
require(arbutus)
require(geiger)
## Inits
nBands = nBands
taxa <- spectra[, 1]
spectrum <- spectra[, 2:(nBands + 1)]
bandNames <- names(spectrum)[1:nBands]
obs_tbl <- list()
p_vals <- list()
for(i in 1:nBands) {
svMisc::progress(i, max.value = nBands)
band <- setNames(spectrum[, i], taxa)
unity <- make_unit_tree(tree, data = band)
## calculate default test stats on observed data
obs <- calculate_pic_stat(unity, stats = NULL)
obs$Band <- bandNames[i]
obs_tbl[[i]] <- obs
## simulate data on unit.tree
sim.dat <- simulate_char_unit(unity, nsim = nSim)
## calculate default test stats on simulated data
sims <- calculate_pic_stat(sim.dat, stats = NULL)
## compare simulated to observed test statistics
res <- compare_pic_stat(obs, sims)
p_vals[[i]] <- res$p.values
}
obs_tbl <- do.call(rbind, obs_tbl)
p_vals <- data.frame(do.call(rbind, xx))
p_vals$Band <- bandNames
results <- list(adequacy = obs_tbl, pVals = p_vals)
return(results)
}
ttt <- check_Adequacy(tree = oak_tree,
spectra = oak_spectra$Spec_mean,
nBands = 10,
nSim = 1000)
nBands = 10
spectra <- oak_spectra$Spec_mean
taxa <- spectra[, 1]
taxa
spectrum <- spectra[, 2:(nBands + 1)]
spectrum
bandNames <- names(spectrum)[1:nBands]
bandNames
i=1
setNames(spectrum[, i], taxa)
band <- setNames(spectrum[, i], taxa)
band
make_unit_tree(tree, data = band)
tree <- oak_tree
make_unit_tree(tree, data = band)
treedata()
?treedata
treeData <- treedata(tree, band, sort = TRUE, warnings = FALSE)
treeData
unity <- make_unit_tree(treeData$phy, data = treeData$data)
treeData$data
treeData$phy
band[match(tree$tip.label, band)]
band[match(tree$tip.label, names(band))]
band_order <- band[match(tree$tip.label, names(band))]
tree
band
band_order
unity <- make_unit_tree(tree, data = band_order)
## calculate default test stats on observed data
obs <- calculate_pic_stat(unity, stats = NULL)
obs$Band <- bandNames[i]
obs
## simulate data on unit.tree
sim.dat <- simulate_char_unit(unity, nsim = nSim)
check_Adequacy <- function(tree, spectra, nBands = 10, nSim = 1000) {
require(arbutus)
require(geiger)
## Inits
nBands = nBands
taxa <- spectra[, 1]
spectrum <- spectra[, 2:(nBands + 1)]
bandNames <- names(spectrum)[1:nBands]
obs_tbl <- list()
p_vals <- list()
for(i in 1:nBands) {
svMisc::progress(i, max.value = nBands)
band <- setNames(spectrum[, i], taxa)
treeData <- treedata(tree, band, sort = TRUE, warnings = FALSE)
band_order <- band[match(tree$tip.label, names(band))]
unity <- make_unit_tree(tree, data = band_order)
## calculate default test stats on observed data
obs <- calculate_pic_stat(unity, stats = NULL)
obs$Band <- bandNames[i]
obs_tbl[[i]] <- obs
## simulate data on unit.tree
sim.dat <- simulate_char_unit(unity, nsim = nSim)
## calculate default test stats on simulated data
sims <- calculate_pic_stat(sim.dat, stats = NULL)
## compare simulated to observed test statistics
res <- compare_pic_stat(obs, sims)
p_vals[[i]] <- res$p.values
}
obs_tbl <- do.call(rbind, obs_tbl)
p_vals <- data.frame(do.call(rbind, xx))
p_vals$Band <- bandNames
results <- list(adequacy = obs_tbl, pVals = p_vals)
return(results)
}
ttt <- check_Adequacy(tree = oak_tree,
spectra = oak_spectra$Spec_mean,
nBands = 10,
nSim = 1000)
obs_tbl <- list()
p_vals <- list()
for(i in 1:nBands) {
svMisc::progress(i, max.value = nBands)
band <- setNames(spectrum[, i], taxa)
treeData <- treedata(tree, band, sort = TRUE, warnings = FALSE)
band_order <- band[match(tree$tip.label, names(band))]
unity <- make_unit_tree(tree, data = band_order)
## calculate default test stats on observed data
obs <- calculate_pic_stat(unity, stats = NULL)
obs$Band <- bandNames[i]
obs_tbl[[i]] <- obs
## simulate data on unit.tree
sim.dat <- simulate_char_unit(unity, nsim = nSim)
## calculate default test stats on simulated data
sims <- calculate_pic_stat(sim.dat, stats = NULL)
## compare simulated to observed test statistics
res <- compare_pic_stat(obs, sims)
p_vals[[i]] <- res$p.values
}
nSim = 100
for(i in 1:nBands) {
svMisc::progress(i, max.value = nBands)
band <- setNames(spectrum[, i], taxa)
treeData <- treedata(tree, band, sort = TRUE, warnings = FALSE)
band_order <- band[match(tree$tip.label, names(band))]
unity <- make_unit_tree(tree, data = band_order)
## calculate default test stats on observed data
obs <- calculate_pic_stat(unity, stats = NULL)
obs$Band <- bandNames[i]
obs_tbl[[i]] <- obs
## simulate data on unit.tree
sim.dat <- simulate_char_unit(unity, nsim = nSim)
## calculate default test stats on simulated data
sims <- calculate_pic_stat(sim.dat, stats = NULL)
## compare simulated to observed test statistics
res <- compare_pic_stat(obs, sims)
p_vals[[i]] <- res$p.values
}
check_Adequacy <- function(tree, spectra, nBands = 10, nSim = 1000) {
require(arbutus)
require(geiger)
## Inits
nBands = nBands
taxa <- spectra[, 1]
spectrum <- spectra[, 2:(nBands + 1)]
bandNames <- names(spectrum)[1:nBands]
obs_tbl <- list()
p_vals <- list()
for(i in 1:nBands) {
svMisc::progress(i, max.value = nBands)
band <- setNames(spectrum[, i], taxa)
treeData <- treedata(tree, band, sort = TRUE, warnings = FALSE)
band_order <- band[match(tree$tip.label, names(band))]
unity <- make_unit_tree(tree, data = band_order)
## calculate default test stats on observed data
obs <- calculate_pic_stat(unity, stats = NULL)
obs_tmp <- obs
obs_tmp$Band <- bandNames[i]
obs_tbl[[i]] <- obs_tmp
## simulate data on unit.tree
sim.dat <- simulate_char_unit(unity, nsim = nSim)
## calculate default test stats on simulated data
sims <- calculate_pic_stat(sim.dat, stats = NULL)
## compare simulated to observed test statistics
res <- compare_pic_stat(obs, sims)
p_vals[[i]] <- res$p.values
}
obs_tbl <- do.call(rbind, obs_tbl)
p_vals <- data.frame(do.call(rbind, xx))
p_vals$Band <- bandNames
results <- list(adequacy = obs_tbl, pVals = p_vals)
return(results)
}
ttt <- check_Adequacy(tree = oak_tree,
spectra = oak_spectra$Spec_mean,
nBands = 10,
nSim = 1000)
names(spectrum)[1:nBands]
check_Adequacy <- function(tree, spectra, nBands = 10, nSim = 1000) {
require(arbutus)
require(geiger)
## Inits
nBands = nBands
taxa <- spectra[, 1]
spectrum <- spectra[, 2:(nBands + 1)]
bandNames <- names(spectrum)[1:nBands]
obs_tbl <- list()
p_vals <- list()
for(i in 1:nBands) {
svMisc::progress(i, max.value = nBands)
band <- setNames(spectrum[, i], taxa)
treeData <- treedata(tree, band, sort = TRUE, warnings = FALSE)
# This is annoying, tree and data should be in the same order
band_order <- band[match(tree$tip.label, names(band))]
unity <- make_unit_tree(tree, data = band_order)
## calculate default test stats on observed data
obs <- calculate_pic_stat(unity, stats = NULL)
#obs_tmp <- obs
#obs_tmp$Band <- bandNames[i]
#obs_tbl[[i]] <- obs_tmp
## simulate data on unit.tree
sim.dat <- simulate_char_unit(unity, nsim = nSim)
## calculate default test stats on simulated data
sims <- calculate_pic_stat(sim.dat, stats = NULL)
## compare simulated to observed test statistics
res <- compare_pic_stat(obs, sims)
p_vals[[i]] <- res$p.values
}
obs_tbl <- do.call(rbind, obs_tbl)
obs_tbl$Band <- bandNames
p_vals <- data.frame(do.call(rbind, xx))
p_vals$Band <- bandNames
results <- list(adequacy = obs_tbl, pVals = p_vals)
return(results)
}
ttt <- check_Adequacy(tree = oak_tree,
spectra = oak_spectra$Spec_mean,
nBands = 10,
nSim = 1000)
obs_tbl <- list()
p_vals <- list()
for(i in 1:nBands) {
svMisc::progress(i, max.value = nBands)
band <- setNames(spectrum[, i], taxa)
treeData <- treedata(tree, band, sort = TRUE, warnings = FALSE)
# This is annoying, tree and data should be in the same order
band_order <- band[match(tree$tip.label, names(band))]
unity <- make_unit_tree(tree, data = band_order)
## calculate default test stats on observed data
obs <- calculate_pic_stat(unity, stats = NULL)
#obs_tmp <- obs
#obs_tmp$Band <- bandNames[i]
#obs_tbl[[i]] <- obs_tmp
## simulate data on unit.tree
sim.dat <- simulate_char_unit(unity, nsim = nSim)
## calculate default test stats on simulated data
sims <- calculate_pic_stat(sim.dat, stats = NULL)
## compare simulated to observed test statistics
res <- compare_pic_stat(obs, sims)
p_vals[[i]] <- res$p.values
}
obs_tbl <- do.call(rbind, obs_tbl)
obs_tbl$Band <- bandNames
obs_tbl
do.call(rbind, obs_tbl)
obs_tbl <- list()
p_vals <- list()
for(i in 1:nBands) {
svMisc::progress(i, max.value = nBands)
band <- setNames(spectrum[, i], taxa)
treeData <- treedata(tree, band, sort = TRUE, warnings = FALSE)
# This is annoying, tree and data should be in the same order
band_order <- band[match(tree$tip.label, names(band))]
unity <- make_unit_tree(tree, data = band_order)
## calculate default test stats on observed data
obs <- calculate_pic_stat(unity, stats = NULL)
#obs_tmp <- obs
#obs_tmp$Band <- bandNames[i]
#obs_tbl[[i]] <- obs_tmp
## simulate data on unit.tree
sim.dat <- simulate_char_unit(unity, nsim = nSim)
## calculate default test stats on simulated data
sims <- calculate_pic_stat(sim.dat, stats = NULL)
## compare simulated to observed test statistics
res <- compare_pic_stat(obs, sims)
p_vals[[i]] <- res$p.values
}
do.call(rbind, obs_tbl)
obs_tbl
obs_tbl <- list()
p_vals <- list()
for(i in 1:nBands) {
svMisc::progress(i, max.value = nBands)
band <- setNames(spectrum[, i], taxa)
treeData <- treedata(tree, band, sort = TRUE, warnings = FALSE)
# This is annoying, tree and data should be in the same order
band_order <- band[match(tree$tip.label, names(band))]
unity <- make_unit_tree(tree, data = band_order)
## calculate default test stats on observed data
obs <- calculate_pic_stat(unity, stats = NULL)
#obs_tmp <- obs
#obs_tmp$Band <- bandNames[i]
obs_tbl[[i]] <- obs
## simulate data on unit.tree
sim.dat <- simulate_char_unit(unity, nsim = nSim)
## calculate default test stats on simulated data
sims <- calculate_pic_stat(sim.dat, stats = NULL)
## compare simulated to observed test statistics
res <- compare_pic_stat(obs, sims)
p_vals[[i]] <- res$p.values
}
do.call(rbind, obs_tbl)
obs_tbl <- do.call(rbind, obs_tbl)
obs_tbl$Band <- bandNames
obs_tbl
do.call(rbind, p_vals)
data.frame(do.call(rbind, p_vals))
p_vals <- data.frame(do.call(rbind, p_vals))
p_vals$Band <- bandNames
results <- list(adequacy = obs_tbl, pVals = p_vals)
results
obs_tbl <- list()
p_vals <- list()
for(i in 1:nBands) {
svMisc::progress(i, max.value = nBands)
band <- setNames(spectrum[, i], taxa)
treeData <- treedata(tree, band, sort = TRUE, warnings = FALSE)
# This is annoying, tree and data should be in the same order
band_order <- band[match(tree$tip.label, names(band))]
unity <- make_unit_tree(tree, data = band_order)
## calculate default test stats on observed data
obs <- calculate_pic_stat(unity, stats = NULL)
#obs_tmp <- obs
#obs_tmp$Band <- bandNames[i]
obs_tbl[[i]] <- obs
## simulate data on unit.tree
sim.dat <- simulate_char_unit(unity, nsim = nSim)
## calculate default test stats on simulated data
sims <- calculate_pic_stat(sim.dat, stats = NULL)
## compare simulated to observed test statistics
res <- compare_pic_stat(obs, sims)
p_vals[[i]] <- res$p.values
}
do.call(rbind, obs_tbl)
obs_tbl <- do.call(rbind, obs_tbl)
obs_tbl
round(obs_tbl, 3)
round(obs_tbl, 4)
obs_tbl <- list()
p_vals <- list()
for(i in 1:nBands) {
svMisc::progress(i, max.value = nBands)
band <- setNames(spectrum[, i], taxa)
treeData <- treedata(tree, band, sort = TRUE, warnings = FALSE)
# This is annoying, tree and data should be in the same order
band_order <- band[match(tree$tip.label, names(band))]
unity <- make_unit_tree(tree, data = band_order)
## calculate default test stats on observed data
obs <- calculate_pic_stat(unity, stats = NULL)
#obs_tmp <- obs
#obs_tmp$Band <- bandNames[i]
obs_tbl[[i]] <- obs
## simulate data on unit.tree
sim.dat <- simulate_char_unit(unity, nsim = nSim)
## calculate default test stats on simulated data
sims <- calculate_pic_stat(sim.dat, stats = NULL)
## compare simulated to observed test statistics
res <- compare_pic_stat(obs, sims)
p_vals[[i]] <- res$p.values
}
round(do.call(rbind, obs_tbl), 4)
obs_tbl$Band <- bandNames
obs_tbl
obs_tbl <- round(do.call(rbind, obs_tbl), 4)
obs_tbl
obs_tbl <- list()
p_vals <- list()
for(i in 1:nBands) {
svMisc::progress(i, max.value = nBands)
band <- setNames(spectrum[, i], taxa)
treeData <- treedata(tree, band, sort = TRUE, warnings = FALSE)
# This is annoying, tree and data should be in the same order
band_order <- band[match(tree$tip.label, names(band))]
unity <- make_unit_tree(tree, data = band_order)
## calculate default test stats on observed data
obs <- calculate_pic_stat(unity, stats = NULL)
#obs_tmp <- obs
#obs_tmp$Band <- bandNames[i]
obs_tbl[[i]] <- obs
## simulate data on unit.tree
sim.dat <- simulate_char_unit(unity, nsim = nSim)
## calculate default test stats on simulated data
sims <- calculate_pic_stat(sim.dat, stats = NULL)
## compare simulated to observed test statistics
res <- compare_pic_stat(obs, sims)
p_vals[[i]] <- res$p.values
}
obs_tbl <- do.call(rbind, obs_tbl)
obs_tbl
obs_tbl$Band <- bandNames
obs_tbl$Band
obs_tbl
p_vals <- data.frame(do.call(rbind, p_vals))
p_vals$Band <- bandNames
p_vals
check_Adequacy <- function(tree, spectra, nBands = 10, nSim = 1000) {
require(arbutus)
require(geiger)
## Inits
nBands = nBands
taxa <- spectra[, 1]
spectrum <- spectra[, 2:(nBands + 1)]
bandNames <- names(spectrum)[1:nBands]
obs_tbl <- list()
p_vals <- list()
for(i in 1:nBands) {
svMisc::progress(i, max.value = nBands)
band <- setNames(spectrum[, i], taxa)
treeData <- treedata(tree, band, sort = TRUE, warnings = FALSE)
# This is annoying, tree and data should be in the same order
band_order <- band[match(tree$tip.label, names(band))]
unity <- make_unit_tree(tree, data = band_order)
## calculate default test stats on observed data
obs <- calculate_pic_stat(unity, stats = NULL)
#obs_tmp <- obs
#obs_tmp$Band <- bandNames[i]
obs_tbl[[i]] <- obs
## simulate data on unit.tree
sim.dat <- simulate_char_unit(unity, nsim = nSim)
## calculate default test stats on simulated data
sims <- calculate_pic_stat(sim.dat, stats = NULL)
## compare simulated to observed test statistics
res <- compare_pic_stat(obs, sims)
p_vals[[i]] <- res$p.values
}
obs_tbl <- do.call(rbind, obs_tbl)
obs_tbl$Band <- bandNames
p_vals <- data.frame(do.call(rbind, p_vals))
p_vals$Band <- bandNames
results <- list(adequacy = obs_tbl, pVals = p_vals)
return(results)
}
ttt <- check_Adequacy(tree = oak_tree,
spectra = oak_spectra$Spec_mean,
nBands = 10,
nSim = 1000)
ttt
View(p_vals)
check_Adequacy <- function(tree, spectra, nBands = 100, nSim = 1000) {
require(arbutus)
require(geiger)
## Inits
nBands = nBands
taxa <- spectra[, 1]
spectrum <- spectra[, 2:(nBands + 1)]
bandNames <- names(spectrum)[1:nBands]
obs_tbl <- list()
p_vals <- list()
for(i in 1:nBands) {
svMisc::progress(i, max.value = nBands)
band <- setNames(spectrum[, i], taxa)
treeData <- treedata(tree, band, sort = TRUE, warnings = FALSE)
# This is annoying, tree and data should be in the same order
band_order <- band[match(tree$tip.label, names(band))]
unity <- make_unit_tree(tree, data = band_order)
## calculate default test stats on observed data
obs <- calculate_pic_stat(unity, stats = NULL)
#obs_tmp <- obs
#obs_tmp$Band <- bandNames[i]
obs_tbl[[i]] <- obs
## simulate data on unit.tree
sim.dat <- simulate_char_unit(unity, nsim = nSim)
## calculate default test stats on simulated data
sims <- calculate_pic_stat(sim.dat, stats = NULL)
## compare simulated to observed test statistics
res <- compare_pic_stat(obs, sims)
p_vals[[i]] <- res$p.values
}
obs_tbl <- do.call(rbind, obs_tbl)
obs_tbl$Band <- bandNames
p_vals <- data.frame(do.call(rbind, p_vals))
p_vals$Band <- bandNames
results <- list(adequacy = obs_tbl, pVals = p_vals)
return(results)
}
ttt <- check_Adequacy(tree = oak_tree,
spectra = oak_spectra$Spec_mean,
nBands = 100,
nSim = 1000)
ttt$adequacy
ttt$pVals
