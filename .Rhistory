##### Usage #####
source("R/wrappers.R") # Set of functions that fit a set of evolutionary models using spectra
load("Data/oak_tree.rda") # Phylogeny
load("Data/oak_spec_jcb2016.rda") # Spectral data
### Data aggregation
# Given there are taxa with a different number of observations, let's aggregate the data
# This function return a list of two data.frames with the aggregated spectra by species
oak_spectra <- demon_AGG(spectra = oak_spec_jcb2016)
fit_spectra <- demon_Evol(spectra = oak_spectra$Spec_mean,
tree = oak_tree,
nBands = 10)
##### Usage #####
source("R/wrappers.R") # Set of functions that fit a set of evolutionary models using spectra
load("Data/oak_tree.rda") # Phylogeny
load("Data/oak_spec_jcb2016.rda") # Spectral data
### Data aggregation
# Given there are taxa with a different number of observations, let's aggregate the data
# This function return a list of two data.frames with the aggregated spectra by species
oak_spectra <- demon_AGG(spectra = oak_spec_jcb2016)
fit_spectra <- demon_Evol(spectra = oak_spectra$Spec_mean,
tree = oak_tree,
nBands = 10)
##### Usage #####
source("R/wrappers.R") # Set of functions that fit a set of evolutionary models using spectra
fit_spectra <- demon_Evol(spectra = oak_spectra$Spec_mean,
tree = oak_tree,
nBands = 10)
rm(demon_Evol)
##### Usage #####
source("R/wrappers.R") # Set of functions that fit a set of evolutionary models using spectra
fit_spectra <- demon_Evol(spectra = oak_spectra$Spec_mean,
tree = oak_tree,
nBands = 10)
paste0("Three evolutionary models were fitted for ", nBands)
##### Usage #####
source("R/wrappers.R") # Set of functions that fit a set of evolutionary models using spectra
fit_spectra <- demon_Evol(spectra = oak_spectra$Spec_mean,
tree = oak_tree,
nBands = 10)
fit_spectra$OU_spectra
?fitContinuous
##### Usage #####
source("R/wrappers.R") # Set of functions that fit a set of evolutionary models using spectra
load("Data/oak_tree.rda") # Phylogeny
load("Data/oak_spec_jcb2016.rda") # Spectral data
View(oak_spec_jcb2016) # this data was obtained from Dudu's github
### Data aggregation
# Given there are taxa with a different number of observations, let's aggregate the data
# This function return a list of two data.frames with the aggregated spectra by species
oak_spectra <- demon_AGG(spectra = oak_spec_jcb2016)
# Wrapper function that aggregate spectral data by taxa
demon_AGG <- function(spectra) {
Spectra_Mean <- aggregate( . ~ species, spectra, FUN = mean, na.rm = TRUE)
Spectra_SD <- aggregate( . ~ species, spectra, FUN = sd, na.rm = TRUE)
#Spectra_Median <- aggregate( . ~ species, FUN = spectra, median, na.rm = TRUE)
Spectra_StdErr <- aggregate(. ~ species, spectra, FUN = SE, na.rm = TRUE)
results <- list(Spec_mean = Spectra_Mean, Spec_SD = Spectra_SD, Spec_SE = Spectra_StdErr)
return(results)
}
### Data aggregation
# Given there are taxa with a different number of observations, let's aggregate the data
# This function return a list of two data.frames with the aggregated spectra by species
oak_spectra <- demon_AGG(spectra = oak_spec_jcb2016)
# Wrapper function that aggregate spectral data by taxa
demon_AGG <- function(spectra) {
Spectra_Mean <- aggregate( . ~ species, spectra, FUN = mean, na.rm = TRUE)
Spectra_SD <- aggregate( . ~ species, spectra, FUN = sd, na.rm = TRUE)
#Spectra_Median <- aggregate( . ~ species, FUN = spectra, median, na.rm = TRUE)
Spectra_StdErr <- aggregate(. ~ species, spectra, FUN = SE)
results <- list(Spec_mean = Spectra_Mean, Spec_SD = Spectra_SD, Spec_SE = Spectra_StdErr)
return(results)
}
### Data aggregation
# Given there are taxa with a different number of observations, let's aggregate the data
# This function return a list of two data.frames with the aggregated spectra by species
oak_spectra <- demon_AGG(spectra = oak_spec_jcb2016)
oak_spectra$Spec_mean
oak_spectra$Spec_SE
fit_spectra <- demon_Evol(spectra = oak_spectra$Spec_mean,
tree = oak_tree,
nBands = 10, NC = 2)
##### Auxiliary functions #####
SE <- function(x) {
res <- sd(x)/sqrt(sum(!is.na(x)))
}
# Wrapper function that aggregate spectral data by taxa
demon_AGG <- function(spectra) {
if ( ! ("plotrix" %in% installed.packages())) {install.packages("plotrix", dependencies = T)}
Spectra_Mean <- aggregate( . ~ species, spectra, FUN = mean, na.rm = TRUE)
Spectra_SD <- aggregate( . ~ species, spectra, FUN = sd, na.rm = TRUE)
#Spectra_Median <- aggregate( . ~ species, FUN = spectra, median, na.rm = TRUE)
Spectra_StdErr <- aggregate(. ~ species, spectra, FUN = SE)
Spectra_StdErr2 <- aggregate(. ~ species, FUN = plotrix::std.error)
results <- list(Spec_mean = Spectra_Mean, Spec_SD = Spectra_SD,
Spec_SE = Spectra_StdErr, Spec_SE2 = Spectra_StdErr2)
return(results)
}
demon_Evol <- function(spectra, tree, nBands = 10, NC) {
if ( ! ("geiger" %in% installed.packages())) {install.packages("geiger", dependencies = T)}
if ( ! ("svMisc" %in% installed.packages())) {install.packages("svMisc", dependencies = T)}
require(geiger)
## Inits
nBands = nBands
taxa <- spectra[, 1]
spectrum <- spectra[, 2:(nBands + 1)]
bandNames <- names(spectrum)[1:nBands]
# White noise parameters
# Brownian motion parameters
bm_sigsq <- numeric(length = nBands)
bm_z0 <- numeric(length = nBands)
bm_lnL <- numeric(length = nBands)
bm_nPar <- numeric(length = nBands)
bm_AIC <- numeric(length = nBands)
bm_AICc <- numeric(length = nBands)
# Ornstein-Uhlenbeck parameters
ou_alpha <- numeric(length = nBands)
ou_sigsq <- numeric(length = nBands)
ou_z0 <- numeric(length = nBands)
ou_lnL <- numeric(length = nBands)
ou_nPar <- numeric(length = nBands)
ou_AIC <- numeric(length = nBands)
ou_AICc <- numeric(length = nBands)
## Calculate the phylogenetic half-life --
# how long does it take for half the information in the phylogeny to be erased
halflife <- numeric(length = nBands)
## Compare this to total tree depth
phy_halflife <- numeric(length = nBands)
# Early burst parameters
eb_a <- numeric(length = nBands)
eb_sigsq <- numeric(length = nBands)
eb_z0 <- numeric(length = nBands)
eb_lnL <- numeric(length = nBands)
eb_nPar <- numeric(length = nBands)
eb_AIC <- numeric(length = nBands)
eb_AICc <- numeric(length = nBands)
for(i in 1:nBands) {
svMisc::progress(i, max.value = nBands)
band <- setNames(spectrum[, i], taxa)
## Brownian motion
fit_bm <- geiger::fitContinuous(tree, band, model = "BM", ncores = NC)
# Extract parameters
bm_sigsq[i] <- fit_bm$opt$sigsq
bm_z0[i] <- fit_bm$opt$z0
bm_lnL[i] <- fit_bm$opt$lnL
bm_nPar[i] <- fit_bm$opt$k
bm_AIC[i] <- fit_bm$opt$aic
bm_AICc[i] <- fit_bm$opt$aicc
## Ornstein-Uhlenbeck
fit_ou <- geiger::fitContinuous(tree, band, model = "OU", ncores = NC)
# Extract parameters
ou_alpha[i] <- fit_ou$opt$alpha
ou_sigsq[i] <- fit_ou$opt$sigsq
ou_z0[i] <- fit_ou$opt$z0
ou_lnL[i] <- fit_ou$opt$lnL
ou_nPar[i] <- fit_ou$opt$k
ou_AIC[i] <- fit_ou$opt$aic
ou_AICc[i] <- fit_ou$opt$aicc
## Calculate the phylogenetic half-life --
# how long does it take for half the information in the phylogeny to be erased
halflife[i] <- log(2)/fit_ou$opt$alpha
## Compare this to total tree depth
phy_halflife[i] <- halflife / max(branching.times(tree))
## Early burst
fit_eb <- geiger::fitContinuous(tree, band, model = "EB", ncores = NC)
# Extract parameters
eb_a[i] <- fit_eb$opt$a
eb_sigsq[i] <- fit_eb$opt$sigsq
eb_z0[i] <- fit_eb$opt$z0
eb_lnL[i] <- fit_eb$opt$lnL
eb_nPar[i] <- fit_eb$opt$k
eb_AIC[i] <- fit_eb$opt$aic
eb_AICc[i] <- fit_eb$opt$aicc
}
print(paste0("Three evolutionary models were fitted for ", nBands,
" bands assuming NO measurement error"))
# Brownian motion parameters
BM_spectra <- data.frame(bandNames, bm_sigsq, bm_z0, bm_lnL,
bm_nPar, bm_AIC, bm_AICc)
# Ornstein-Uhlenbeck parameters
OU_spectra <- data.frame(bandNames, ou_alpha, ou_sigsq, ou_z0, ou_lnL,
halflife, phy_halflife,
ou_nPar, ou_AIC, ou_AICc)
# Early burst parameters
EB_spectra <- data.frame(bandNames, eb_a, eb_sigsq, eb_z0, eb_lnL,
eb_nPar, eb_AIC, eb_AICc)
results <- list(BM_spectra = BM_spectra,
OU_spectra = OU_spectra,
EB_spectra = EB_spectra)
return(results)
}
demon_Evol_ME <- function(spectra, spec_ME, tree, nBands = 10, NC) {
if ( ! ("geiger" %in% installed.packages())) {install.packages("geiger", dependencies = T)}
if ( ! ("svMisc" %in% installed.packages())) {install.packages("svMisc", dependencies = T)}
require(geiger)
## Inits
nBands = nBands
taxa <- spectra[, 1]
spectrum <- spectra[, 2:(nBands + 1)]
bandNames <- names(spectrum)[1:nBands]
# White noise parameters
# Brownian motion parameters
bm_sigsq <- numeric(length = nBands)
bm_z0 <- numeric(length = nBands)
bm_lnL <- numeric(length = nBands)
bm_nPar <- numeric(length = nBands)
bm_AIC <- numeric(length = nBands)
bm_AICc <- numeric(length = nBands)
# Ornstein-Uhlenbeck parameters
ou_alpha <- numeric(length = nBands)
ou_sigsq <- numeric(length = nBands)
ou_z0 <- numeric(length = nBands)
ou_lnL <- numeric(length = nBands)
ou_nPar <- numeric(length = nBands)
ou_AIC <- numeric(length = nBands)
ou_AICc <- numeric(length = nBands)
## Calculate the phylogenetic half-life --
# how long does it take for half the information in the phylogeny to be erased
halflife <- numeric(length = nBands)
## Compare this to total tree depth
phy_halflife <- numeric(length = nBands)
# Early burst parameters
eb_a <- numeric(length = nBands)
eb_sigsq <- numeric(length = nBands)
eb_z0 <- numeric(length = nBands)
eb_lnL <- numeric(length = nBands)
eb_nPar <- numeric(length = nBands)
eb_AIC <- numeric(length = nBands)
eb_AICc <- numeric(length = nBands)
for(i in 1:nBands) {
svMisc::progress(i, max.value = nBands)
band <- setNames(spectrum[, i], taxa)
ME <- setNames(spec_ME[, i], taxa)
## Brownian motion
fit_bm <- geiger::fitContinuous(tree, band, model = "BM", SE = ME, ncores = NC)
# Extract parameters
bm_sigsq[i] <- fit_bm$opt$sigsq
bm_z0[i] <- fit_bm$opt$z0
bm_lnL[i] <- fit_bm$opt$lnL
bm_nPar[i] <- fit_bm$opt$k
bm_AIC[i] <- fit_bm$opt$aic
bm_AICc[i] <- fit_bm$opt$aicc
## Ornstein-Uhlenbeck
fit_ou <- geiger::fitContinuous(tree, band, model = "OU", SE = ME, ncores = NC)
# Extract parameters
ou_alpha[i] <- fit_ou$opt$alpha
ou_sigsq[i] <- fit_ou$opt$sigsq
ou_z0[i] <- fit_ou$opt$z0
ou_lnL[i] <- fit_ou$opt$lnL
ou_nPar[i] <- fit_ou$opt$k
ou_AIC[i] <- fit_ou$opt$aic
ou_AICc[i] <- fit_ou$opt$aicc
## Calculate the phylogenetic half-life --
# how long does it take for half the information in the phylogeny to be erased
halflife[i] <- log(2)/fit_ou$opt$alpha
## Compare this to total tree depth
phy_halflife[i] <- halflife / max(branching.times(tree))
## Early burst
fit_eb <- geiger::fitContinuous(tree, band, model = "EB", SE = ME, ncores = NC)
# Extract parameters
eb_a[i] <- fit_eb$opt$a
eb_sigsq[i] <- fit_eb$opt$sigsq
eb_z0[i] <- fit_eb$opt$z0
eb_lnL[i] <- fit_eb$opt$lnL
eb_nPar[i] <- fit_eb$opt$k
eb_AIC[i] <- fit_eb$opt$aic
eb_AICc[i] <- fit_eb$opt$aicc
}
print(paste0("Three evolutionary models were fitted for ", nBands,
" bands assuming measurement error"))
# Brownian motion parameters
BM_spectra <- data.frame(bandNames, bm_sigsq, bm_z0, bm_lnL,
bm_nPar, bm_AIC, bm_AICc)
# Ornstein-Uhlenbeck parameters
OU_spectra <- data.frame(bandNames, ou_alpha, ou_sigsq, ou_z0, ou_lnL,
halflife, phy_halflife,
ou_nPar, ou_AIC, ou_AICc)
# Early burst parameters
EB_spectra <- data.frame(bandNames, eb_a, eb_sigsq, eb_z0, eb_lnL,
eb_nPar, eb_AIC, eb_AICc)
results <- list(BM_spectra = BM_spectra,
OU_spectra = OU_spectra,
EB_spectra = EB_spectra)
return(results)
}
# Wrapper to perform model selection
demon_ModSel <- function(BM, OU, EB, nBands = 10, bandNames) {
AIC_spectra <- list()
for(k in 1:nBands) {
band <- bandNames[k]
bm <- BM[k]
ou <- OU[k]
eb <- EB[k]
AICs <- c(bm, ou, eb)
names(AICs) <- c("BM", "OU", "EB")
res <- geiger::aicw(AICs)
res$Band <- band
res$Model <- c("BM", "OU", "EB")
AIC_spectra[[k]] <- res
}
models <- do.call(rbind, AIC_spectra)
}
### Data aggregation
# Given there are taxa with a different number of observations, let's aggregate the data
# This function return a list of two data.frames with the aggregated spectra by species
oak_spectra <- demon_AGG(spectra = oak_spec_jcb2016)
load("Data/oak_tree.rda") # Phylogeny
load("Data/oak_spec_jcb2016.rda") # Spectral data
### Data aggregation
# Given there are taxa with a different number of observations, let's aggregate the data
# This function return a list of two data.frames with the aggregated spectra by species
oak_spectra <- demon_AGG(spectra = oak_spec_jcb2016)
# Wrapper function that aggregate spectral data by taxa
demon_AGG <- function(spectra) {
if ( ! ("plotrix" %in% installed.packages())) {install.packages("plotrix", dependencies = T)}
Spectra_Mean <- aggregate( . ~ species, spectra, FUN = mean, na.rm = TRUE)
Spectra_SD <- aggregate( . ~ species, spectra, FUN = sd, na.rm = TRUE)
#Spectra_Median <- aggregate( . ~ species, FUN = spectra, median, na.rm = TRUE)
Spectra_StdErr <- aggregate(. ~ species, spectra, FUN = SE)
Spectra_StdErr2 <- aggregate(. ~ species, spectra, FUN = plotrix::std.error)
results <- list(Spec_mean = Spectra_Mean, Spec_SD = Spectra_SD,
Spec_SE = Spectra_StdErr, Spec_SE2 = Spectra_StdErr2)
return(results)
}
### Data aggregation
# Given there are taxa with a different number of observations, let's aggregate the data
# This function return a list of two data.frames with the aggregated spectra by species
oak_spectra <- demon_AGG(spectra = oak_spec_jcb2016)
oak_spectra$Spec_SE[1:5, 1:5]
oak_spectra$Spec_SE2[1:5, 1:5]
oak_spectra$Spec_mean[1:5, 1:5]
fit_spectra <- demon_Evol(spectra = oak_spectra$Spec_mean,
tree = oak_tree,
nBands = 10, NC = 2)
fit_spectra
fit_spectra_ME <- demon_Evol_ME(spectra = oak_spectra$Spec_mean,
ME = oak_spectra$Spec_SE,
tree = oak_tree,
nBands = 10,
NC = 2)
fit_spectra_ME <- demon_Evol_ME(spectra = oak_spectra$Spec_mean,
spec_ME = oak_spectra$Spec_SE,
tree = oak_tree,
nBands = 10,
NC = 2)
fit_spectra_ME
Comparison_spectra <- demon_ModSel(BM = fit_spectra_ME$BM_spectra$bm_AIC,
OU = fit_spectra_ME$OU_spectra$ou_AIC,
EB = fit_spectra_ME$EB_spectra$eb_AIC,
nBands = 10,
bandNames = fit_spectra$BM_spectra$bandNames)
View(Comparison_spectra)
fit_spectra_ME
##### Usage #####
source("R/wrappers.R") # Set of functions that fit a set of evolutionary models using spectra
load("Data/oak_tree.rda") # Phylogeny
load("Data/oak_spec_jcb2016.rda") # Spectral data
oak_spec_jcb2016[1:5, 1:5]
### Data aggregation
# Given there are taxa with a different number of observations, let's aggregate the data
# This function return a list of two data.frames with the aggregated spectra by species
oak_spectra <- demon_AGG(spectra = oak_spec_jcb2016)
oak_spectra$Spec_mean[1:5, 1:5]
oak_spectra$Spec_SE[1:5, 1:5]
# This is assumming measurement error
fit_spectra_ME <- demon_Evol_ME(spectra = oak_spectra$Spec_mean, # mean spectra data
spec_ME = oak_spectra$Spec_SE, # SE spectra data
tree = oak_tree, # phylogenetic tree
nBands = 10,
NC = 2)
fit_spectra_ME
Comparison_spectra <- demon_ModSel(BM = fit_spectra_ME$BM_spectra$bm_AIC,
OU = fit_spectra_ME$OU_spectra$ou_AIC,
EB = fit_spectra_ME$EB_spectra$eb_AIC,
nBands = 10,
bandNames = fit_spectra$BM_spectra$bandNames)
Comparison_spectra <- demon_ModSel(BM = fit_spectra_ME$BM_spectra$bm_AIC,
OU = fit_spectra_ME$OU_spectra$ou_AIC,
EB = fit_spectra_ME$EB_spectra$eb_AIC,
nBands = 10,
bandNames = fit_spectra_ME$BM_spectra$bandNames)
Comparison_spectra
